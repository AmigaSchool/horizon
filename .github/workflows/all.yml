name: Stylecheck and CI

on:
  push:
    branches:
      - '*'
      - '!appveyor-*'
      - '!freebsd-*'
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

env:
  LANG: en_US.UTF-8
  DEBIAN_FRONTEND: noninteractive

jobs:
  stylecheck:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Install preliminary dependencies
      run: sudo apt-get update -y && sudo apt-get install curl gnupg apt-transport-https -y
    - name: Add clang 9.0 to apt sources
      run: echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main" | sudo tee -a /etc/apt/sources.list
    - name: Add LLVM apt key
      run: curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
    - name: Install dependencies
      run: sudo apt-get update -y && sudo apt-get install git clang-format-9 -y
    - name: Style checker
      run: bash scripts/stylecheck.sh

  build-pr-review:
    runs-on: ubuntu-latest
    container: debian:bullseye
    needs: stylecheck
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: apt-get update -y && apt-get install git build-essential libsqlite3-dev util-linux librsvg2-dev libcairomm-1.0-dev libepoxy-dev libgtkmm-3.0-dev uuid-dev libboost-dev  libzmq5 libzmq3-dev libglm-dev libgit2-dev libcurl4-gnutls-dev liboce-ocaf-dev libpodofo-dev python3-dev libzip-dev git libosmesa6-dev -y
    - name: Build
      run: make -j2 build/horizon-pr-review

  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - container: ubuntu:bionic
            cxx: g++-8
            cc: gcc-8
          - container: ubuntu:focal
            cxx: g++
            cc: gcc
          - container: ubuntu:hirsute
            cxx: g++
            cc: gcc
          - container: ubuntu:impish
            cxx: g++
            cc: gcc
          - container: debian:buster
            cxx: g++
            cc: gcc
          - container: debian:bullseye
            cxx: clang
            cc: clang
          - container: debian:bullseye
            cxx: g++
            cc: gcc
        target:
          - all
          - build/horizon.so
    runs-on: ubuntu-latest
    container: ${{ matrix.os.container }}
    needs: stylecheck
    steps:
    - uses: actions/checkout@v2
    - name: generate locales
      run: |
        apt-get update
        apt-get install -y locales
        locale-gen ${{ env.LANG }}
    - name: Install dependencies
      run: apt-get install git build-essential ${{ matrix.os.cxx }} libsqlite3-dev util-linux librsvg2-dev libcairomm-1.0-dev libepoxy-dev libgtkmm-3.0-dev uuid-dev libboost-dev  libzmq5 libzmq3-dev libglm-dev libgit2-dev libcurl4-gnutls-dev liboce-ocaf-dev libpodofo-dev python3-dev libzip-dev git -y
    - name: Install python dependencies
      if: ${{ matrix.target == 'build/horizon.so' }}
      run: apt-get install python3-cairo-dev libosmesa6-dev python3-yaml -y
    - name: Build
      run: make -j2 CXX=${{ matrix.os.cxx }} CC=${{ matrix.os.cc }} WARNFLAGS="-Wall -Wshadow -Wno-parentheses" ${{ matrix.target }}
    - name: Check version
      run: python3 check_version.py
    - name: Test python module
      if: ${{ matrix.target == 'build/horizon.so' }}
      run: python3 -c 'import sys; sys.path.append("build"); import horizon'
    - name: Check app versions
      if: ${{ matrix.target == 'build/horizon.so' }}
      run: python3 scripts/check_app_versions.py

  build-arch:
    strategy:
      fail-fast: false
      matrix:
        target:
          - all
          - build/horizon.so
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    needs: stylecheck
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: pacman -Sy --needed --noconfirm zeromq gtkmm3 cairomm librsvg sqlite3 libgit2 curl opencascade boost glm podofo libzip python
    - name: Install python dependencies
      if: ${{ matrix.target == 'build/horizon.so' }}
      run: pacman -S --needed --noconfirm mesa python-cairo python-yaml
    - name: Build
      run: make -j2 ${{ matrix.target }}
    - name: Check version
      run: python3 check_version.py
    - name: Test python module
      if: ${{ matrix.target == 'build/horizon.so' }}
      run: python3 -c 'import sys; sys.path.append("build"); import horizon'
    - name: Check app versions
      if: ${{ matrix.target == 'build/horizon.so' }}
      run: python3 scripts/check_app_versions.py

  build-debug:
    runs-on: ubuntu-latest
    container: debian:buster
    needs: stylecheck
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: apt-get update -y && apt-get install git build-essential libsqlite3-dev util-linux librsvg2-dev libcairomm-1.0-dev libepoxy-dev libgtkmm-3.0-dev uuid-dev libboost-dev  libzmq5 libzmq3-dev libglm-dev libgit2-dev libcurl4-gnutls-dev liboce-ocaf-dev libpodofo-dev python3-dev libzip-dev git -y
    - name: Build
      run: make DEBUG=1 LDFLAGS="-lstdc++fs -lpthread" -j2
